import sys
import pysces
import numpy as np

"""
Execute file and pass name of pysces model to use.
e.g. "python3 Parser.py DecayingDimerizing.psc"

Can specify directory of pysces file or default to pysces folder.
"python3 Parser.py DecayingDimerizing.psc" will look in "c:\\Pysces\\psc"
whereas "python3 Parser.py DecayingDimerizing.psc /home/..../Gillespie.jl/pysces_models" will look in the pysces_models folder
"""

cm_initvar = "# a `Vector` of `Int64`, representing the initial states of the system. i.e. states of S1, S2, S3. #InitVar\n"
def get_initvar(model):
    output = "x0 = ["

    for i in model.species:
        output += (str(int(getattr(model, i))) + ",")

    output = output[0:-1] + "]\n"
    return output

cm_initparam = "# a `Vector` of `Float64` representing the parameters of the system. #InitPar\n"
def get_initparam(model):
    output = "parms = ["

    for i in model.parameters:
        output += (str(getattr(model, i)) + ",")

    output = output[0:-1] + "]\n"
    return output

cm_mtx = "# a `Matrix` of `Int64`, representing the transitions of the system, organised by row. Stoichiometric Matrix\n"
def get_matrix(model):
    output = "nu = [["
    m = np.asarray(np.transpose(model.Nmatrix.array), dtype='int')
    for i in m:# removes "".psc" if in string

        for j in i:
            output += str(j) + " "
        output = output[0:-1] + "];\n["
    output = output[0:-2] + "]\n"
    return output

cm_prop = "# For propensities function\n"
def get_propensities(model):
    reactions = model.reactions
    output = "["
    current_reaction = 0

    f = open(model.ModelDir + "/" + model.ModelFile, "r")

    for x in f:
        if reactions[current_reaction] in x:
            current_reaction += 1
            f.readline()
            output += f.readline().strip() + ","
            if current_reaction >= len(reactions):
                break
    f.close()
    return output[0:-1] + "]\n"

cm_F = "# **F** : a `Function` or a callable type, which itself takes two arguments; x, a `Vector` of `Int64` representing the states, and parms, a `Vector` of `Float64` representing the parameters of the system. In the case of time-varying rates (for algorithms `:jensen` and `:tjm`), there should be a third argument, the time of the system.\n"
def get_F_dd(model):
    funcString = "function F_dd(x,parms)\n"
    stateString = "    ("
    paramString = "    ("
    popString = "    " + get_propensities(model)

    for i in model.species:
        stateString += str(i) + ","
    stateString = stateString[0:-1] + ") = x\n"

    for i in model.parameters:
        paramString += str(i) + ","
    paramString = paramString[0:-1] + ") = parms\n"

    return(funcString + stateString + paramString + popString + "end\n")

def write_file(argv):

    name = argv[1]

    if len(argv) > 2:
        directory = argv[2]
    else:
        directory = 'c:\\Pysces\\psc'

    if (name.find(".psc") != -1):
        name = name[0:name.find(".psc")]

    model = pysces.model(name + ".psc", dir=directory) #create pysces model
    output = "#AUTOGENERATED\nusing Gillespie\nimport Random: seed!\n" + cm_F + get_F_dd(model) + cm_initvar + get_initvar(model) + cm_mtx + get_matrix(model) + cm_initparam + get_initparam(model) + "tf = 10.0\nseed!(1234)\nresult = ssa(x0,F_dd,nu,parms,tf)"
    f = open(name + ".jl", "w") #Create new Julia file
    f.write(output)
    f.close
    
write_file(sys.argv)