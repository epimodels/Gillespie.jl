#AUTOGENERATED
using Gillespie
import Random: seed!
# **F** : a `Function` or a callable type, which itself takes two arguments; x, a `Vector` of `Int64` representing the states, and parms, a `Vector` of `Float64` representing the parameters of the system. In the case of time-varying rates (for algorithms `:jensen` and `:tjm`), there should be a third argument, the time of the system.
function F_dd(x,parms)
    (TF,TFactive,mRNA,Protein) = x
    (kTFsyn,kTFdeg,kActivate,kInactivate,kX,kmRNAsyn,kmRNAdeg,kProteinsyn,kProteindeg) = parms
    [kTFsyn,kTFdeg*TF,kTFdeg*TFactive,kActivate*TF,kInactivate*TFactive,kmRNAsyn*(TFactive/(TFactive+kX)),kmRNAdeg*mRNA,kProteinsyn*mRNA,kProteindeg*Protein]
end
# a `Vector` of `Int64`, representing the initial states of the system. i.e. states of S1, S2, S3. #InitVar
x0 = [2,10,10,220]
# a `Matrix` of `Int64`, representing the transitions of the system, organised by row. Stoichiometric Matrix
nu = [[1 0 0 0];[-1 0 0 0];[0 -1 0 0];[-1 1 0 0];[1 -1 0 0];[0 0 1 0];[0 0 -1 0];[0 0 0 1];[0 0 0 -1]]
# a `Vector` of `Float64` representing the parameters of the system. #InitPar
parms = [200.0,20.0,2000.0,200.0,5.0,240.0,20.0,400.0,2.0]
tf = 10.0
seed!(1234)
result = ssa(x0,F_dd,nu,parms,tf)